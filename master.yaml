Description: >

    This template deploys a VPC, with a pair of public and private subnets spread
    across two Availabilty Zones. It deploys an Internet Gateway, with a default
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
    and default routes for them in the private subnets.

    It then deploys a highly available ECS cluster using an AutoScaling Group, with
    ECS hosts distributed across multiple Availability Zones.

    Additional a pair of bastion hosts are deployed to allow access to
    everything on the private subnets which includes the ECS cluster, and the
    database hosts.

    It is based on a reference architecture created by awslabs
    https://github.com/awslabs/ecs-refarch-cloudformation

Parameters:

    SshKey:
        Type: AWS::EC2::KeyPair::KeyName
        Description: Provide an SSH KeyName to allow SSH access to the instances via a Bastion Host

    AllowedIngressCidr:
        Type: String
        Description: Provide a valid CIDR to indicate who can SSH to the Bastion Host, defaults to the current office ip address
        Default: 67.134.193.84/32
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    VpcClassB:
        Type: Number
        Description: Class B of VPC (10.XXX.0.0/16)
        ConstraintDescription: 'Must be in the range [0-255]'
        MinValue: 0
        MaxValue: 255

    BastionInstanceType:
        Description: Which instance type should we use to build each bastion host?
        Default: t2.micro
        Type: String

    DatabaseAdminUsername:
        NoEcho: 'true'
        Description: The database admin account username
        Type: String
        MinLength: '1'
        MaxLength: '16'
        AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
        ConstraintDescription: >
            must begin with a letter and contain only alphanumeric characters and be 16 characters or under.

    DatabaseAdminPassword:
        NoEcho: 'true'
        Description: The database admin account password
        Type: String
        MinLength: '8'

    DatabaseInstanceType:
        Description: Which instance type should we use to build each database host?
        AllowedValues:
            - db.t2.micro
            - db.m1.small
            - db.m1.large
            - db.m1.xlarge
            - db.m2.xlarge
        ConstraintDescription: must select a valid database      instance type.
        Type: String

    DatabaseStorageSizeGigabytes:
        Description: The size of the database (Gb)
        Type: Number
        MinValue: '5'
        MaxValue: '6144'
        ConstraintDescription: must be between 5+

    EcsInstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String

    EcsClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number

    WebsiteServiceCount:
        Description: How many website tasks should be deployed across the ECS cluster?
        Type: Number

    ProductServiceCount:
        Description: How many website tasks should be deployed across the ECS cluster?
        Type: Number

    Stage:
        Type: String
        AllowedValues:
            - devint
            - prod

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: VPC
            Parameters:
              - VpcClassB
          - Label: Bastion Host / SSH Access
            Parameters:
              - SshKey
              - AllowedIngressCidr
              - BastionInstanceType
          - Label: ECS
            Parameters:
              - EcsInstanceType
              - EcsClusterSize
          - Label: Services
            Parameters:
              - WebsiteServiceCount
              - ProductServiceCount
        ParameterLabels:
            VpcClassB:
                default: Class B of desired VPC
            SshKey:
                default: SSH KeyPair KeyName
            AllowedIngressCidr:
                default: SSH Ingress CIDR Location
            BastionInstanceType:
                default: Instance type for Bastion Hosts
            EcsInstanceType:
                default: Instance type for ECS Hosts
            EcsClusterSize:
                default: Number of hosts in ECS Cluster
            WebsiteServiceCount:
                default: Number of nodes running Website Service
            ProductServiceCount:
                default: Number of nodes running Product Service
            Stage:
                default: The Development Stage
Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/vpc.yaml'
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                Stage:              !Ref Stage
                VpcCIDR:            !Sub '10.${VpcClassB}.0.0/16'
                PublicSubnet1CIDR:  !Sub '10.${VpcClassB}.8.0/21'
                PublicSubnet2CIDR:  !Sub '10.${VpcClassB}.16.0/21'
                PrivateSubnet1CIDR: !Sub '10.${VpcClassB}.24.0/21'
                PrivateSubnet2CIDR: !Sub '10.${VpcClassB}.32.0/21'

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/security-groups.yaml'
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                BastionCidr: !Ref AllowedIngressCidr

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/load-balancers.yaml'
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

    Bastion:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/bastion.yaml'
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: !Ref BastionInstanceType
                VPC: !GetAtt VPC.Outputs.VPC
                SecurityGroup: !GetAtt SecurityGroups.Outputs.BastionHostSecurityGroup
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SshKey: !Ref SshKey

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/ecs-cluster.yaml'
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: !Ref EcsInstanceType
                ClusterSize: !Ref EcsClusterSize
                VPC: !GetAtt VPC.Outputs.VPC
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                SshKey: !Ref SshKey
    Database:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/stacks/database.yaml'
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                DatabaseName: badgerdb
                AdminUsername: !Ref DatabaseAdminUsername
                AdminPassword: !Ref DatabaseAdminPassword
                InstanceType: !Ref DatabaseInstanceType
                StorageSizeGigabytes: !Ref DatabaseStorageSizeGigabytes
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.DatabaseSecurityGroup

    ProductService:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/services/product-service/service.yaml'
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: !Ref ProductServiceCount
                Listener: !GetAtt ALB.Outputs.Listener
                Path: /products

    WebsiteService:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3.amazonaws.com/codepipeline.traceme.com/${AWS::StackName}/infrastructure/services/website-service/service.yaml'
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: !Ref WebsiteServiceCount
                ProductServiceUrl: !Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "products" ]]
                Listener: !GetAtt ALB.Outputs.Listener
                Path: /


Outputs:

    ProductServiceUrl:
        Description: The URL endpoint for the product service
        Value: !Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "products" ]]

    WebsiteServiceUrl:
        Description: The URL endpoint for the website service
        Value: !Join ["", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "/" ]]
